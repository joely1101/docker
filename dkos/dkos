#!/bin/bash
MYNAME=`whoami`
Version="v2021-04-13"
if [ "$1" = "-v" ];then
   echo "version: $Version"
   exit 0
fi
env_check()
{
    docker -v &>/dev/null
    if [ "$?" != "0" ];then
            echo "docker is nit install, please install by run 'sudo InstallDocker.sh'"
            echo "Or refrernce to https://docs.docker.com/install/linux/docker-ce/ubuntu/ to install docker"
            exit 0
    fi
}
env_check

creat_os()
{
    local image_name=$2
    local ins_name=$1
    local extra_opt="$3"
    #echo "$extra_opt"
    if [ "$image_name" = "" -o "$ins_name" = "" ];then
        echo "error parameter"
        return
    fi
    
    XX=`docker ps -a -q -f name=$ins_name`
    if [ "$XX" != "" ];then
        echo "dkos $ins_name is already exist"
        return 
    fi
    #create OS now
    hd_ins=`docker image ls $image_base -q`
    if [ "$hd_ins" = "" ];then
        docker pull image_base
    fi
    
    VOPTION=""
    VOPTION+=" -v /etc/passwd:/etc/passwd:ro -v /etc/shadow:/etc/shadow:ro -v /etc/group:/etc/group:ro"
    VOPTION+=" -v$HOME:/home/$MYNAME"
    VOPTION+=" --restart=always"
    VOPTION+=" $extra_opt"
    #echo "docker run -idt --hostname $ins_name --name $ins_name $VOPTION $image_name"
    docker run -idt --hostname $ins_name --name $ins_name $VOPTION $image_name
    docker exec -it $ins_name ls /usr/bin/linux32 > /dev/null
    if [ "$?" = "0" ];then
        echo "using linux32 to emulate environment"
        have32=1
    fi
	    dkos_prefix=dkos_
    
    mkdir -p ~/.local/bin/
    if [ -f $0 ];then
        ln -s $0 ~/.local/bin/${dkos_prefix}${ins_name}
	if [ "$have32" = "1" ];then
	    ln -s $0 ~/.local/bin/dkos32_${ins_name}
	fi
    elif [ -f ~/.local/bin/$pname ];then
	    ln -s $pname ~/.local/bin/${dkos_prefix}${ins_name}
	if [ "$have32" = "1" ];then
	    ln -s $pname ~/.local/bin/dkos32_${ins_name}
	fi
	#cp -f ~/.local/bin/$pname ~/.local/bin/${dkos_prefix}${ins_name}
    else
        echo "please put file $0 at ~/.local/bin/"
        exit 99
    fi
    #echo "docker exec -it $ins_name touch /etc/is_dkos"
    docker exec -it $ins_name touch /etc/is_dkos
:<<COMMENT
    echo -e "\nusage:"
    echo "${dkos_prefix}${ins_name} login [ root ] - login ${ins_name}"
    echo "${dkos_prefix}${ins_name} del - delete instance ${ins_name}"
    echo "${dkos_prefix}${ins_name} save imagename - save current ${ins_name} to imagename"
    echo "${dkos_prefix}${ins_name} sh 'ls;ps' - exec sh command by curent user"
COMMENT

    echo -e "\n\n or usage:"
    echo "dkos login ${ins_name} [ root ] - login ${ins_name}"
    echo "dkos del ${ins_name} - delete instance ${ins_name}"
    echo "dkos save ${ins_name} imagename - save current ${ins_name} to imagename"
    echo "dkos sh ${ins_name} 'xx;xx;' - exec sh command by curent user"
}
save_os()
{
    local image_name=$2
    local ins_name=$1
    
    if [ "$ins_name" = "" ];then
        echo "error parameter"
        return
    fi
    if [ "$image_name" = "" ];then
	#get image from instance
	image_name=`docker ps -f name=$ins_name --format "{{.Image}}"`
    fi
    if [ "$image_name" = "" ];then
	echo "error!!image name not found!!"
        return
    fi
    
    echo "image save to $image_name"
    docker commit $ins_name $image_name
}

del_os()
{
    local ins_name=$1
    if [ "$ins_name" = "" ];then
        echo "error parameter"
        return
    fi
    
    if [ "$2" = "-y" ];then
        echo "delete ${ins_name}"
    else
        echo "Are you sure to delete this docker $ins_name [ yes | no ]"
        read -e yesno
        if [ "$yesno" != "yes" ];then
            echo "abort...."
            return
        fi
    fi

    docker stop $ins_name &>/dev/null
    docker rm $ins_name &>/dev/null
    [ $? -ne 0 ] && echo "$ins_name not fuond"
    rm -f ~/.local/bin/dkos_${ins_name}
    rm -f ~/.local/bin/dkos32_${ins_name}
    echo "delete $ins_name finish"
}
login_os()
{
    local ins_name=$1
    if [ "$ins_name" = "" ];then
        echo "error parameter"
        return
    fi
    if docker exec -it $ins_name ls /bin/bash &>/dev/null ;then
        myshell="/bin/bash"
    elif docker exec -it $ins_name ls /bin/ash  &>/dev/null ;then
        myshell="/bin/ash"
    else
        myshell="/bin/sh"
    fi
    docker exec -it $ins_name ls /etc/is_dkos &>/dev/null
    ret=$?
    if [ "$2" = "root" ] || [ "$ret" != "0" ] ;then
        echo "login $ins_name-${dolinux32:-linux64} as root"
        docker exec -it $ins_name  $dolinux32 $myshell

	#eval "docker exec -it $ins_name $dolinux32 $myshell -c '$extra_cmd cd $PWD&&su -s $myshell root'"
    else
        MTNAME=`whoami`
    	shift 1
    	if [ "$1" != "" ];then
    	    extra_cmd="$@;"
    	fi
        
        #docker exec -it $ins_name su - $MYNAME
        #echo "docker exec -it $ins_name /bin/sh -c 'cd $PWD&&su $MYNAME'"
	    
        echo "login $ins_name-${dolinux32:-linux64} as $MYNAME"
        eval "docker exec -it $ins_name $dolinux32 $myshell -c '$extra_cmd cd $PWD&&su -s $myshell $MYNAME'"
    
    fi

}
help()
{
	cat<<EOF
dkos create instant_name image_name - create docker from image_name
dkos create32 instant_name image_name - create docker from image_name
dkos save instant_name [ image_name ] - save instant_name to image_name/original image
dkos del instant_name - del instant_name
dkos login instant_name [ root ] [ extra cmd when login ] - login os
dkos sh instant_name 'xx;xx;' - exec sh command by curent user
dkos ls - list all os
dkos cf config.dkos - create docker from conf
example config.dkos:
DKOS_INST_NAME=ubuntu-test1
DKOS_IMG_NAME=ubuntu:18.04
DKOS_EXTRA_ARG="--privileged=true"
DKOS_INST_LINUX32=1

EOF

}
pname=`basename $0`
action=$1
shift

if [[ $pname == dkos_* ]]; then
    instans=${pname/dkos_/}
elif [[ $pname == dkos32_* ]]; then
    instans=${pname/dkos32_/}
    dolinux32=linux32
else	
    instans=$1
    [ -f ~/.local/$instans.islinux32 ] && dolinux32=linux32
    shift    
fi

if [ "$action" = "create" ];then
    echo "creat_os $instans $@"
    creat_os $instans "$1" "$2"
elif [ "$action" = "create32" ];then
    touch ~/.local/$instans.islinux32
    creat_os $instans "$1" "$2"
elif [ "$action" = "cf" ];then
    conf=$instans
    if [ "$conf" = "" ] || [ ! -f $conf ];then
        echo "file not found $conf"
	exit 99
    fi
    export_list=`cat $conf | xargs`
    echo "export $export_list"
    export $export_list
    if [ "$DKOS_INST_LINUX32" != "" ];then
        touch ~/.local/$instans.islinux32
    fi
    creat_os "$DKOS_INST_NAME" "$DKOS_IMG_NAME" "$DKOS_EXTRA_ARG"
  
elif [ "$action" = "save" ];then
    save_os $instans $@
elif [ "$action" = "ls" ];then
    all_dkos=`ls $HOME/.local/bin/dkos_* | xargs -i basename {}`
    for app in $all_dkos;do
        instans=${app/dkos_/}
        echo $instans
    done
elif [ "$action" = "login" ];then
    login_os $instans $@ 
elif [ "$action" = "sh" ];then
	MTNAME=`whoami`
	command=$@
	[ "$command" = "" ] && echo "command not found" && exit 99
	#echo "run '$command' in Machine  $inst_hostname"
	eval "docker exec -t $instans $dolinux32 /bin/bash -c 'cd $PWD&&su -c \"[ -f /etc/dkos.env ] && source /etc/dkos.env ;$command\" $MTNAME'"

elif [ "$action" = "del" ];then
    rm -f ~/.local/$instans.islinux32 &>/dev/null
    del_os $instans $@    
else
    help
fi
